# Import post definition
#import ./types/post.schema.graphql

# import author definition
#import ./types/author.schema.graphql

# import category definition
#import ./types/category.schema.graphql

# import media definition
#import ./types/media.schema.graphql

# import attachment definition
#import ./types/attachment.schema.graphql

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
        "Search by primary key."
        id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

        "Search by email address."
        email: String
            @eq
            @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
        "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
        name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)

    posts(
        "Order the posts by a given column direction pair."
        orderBy: _ @orderBy(columns: ["publish_at", "title"])

        "Filters by title. Accepts SQL LIKE wildcards `%` and `_`."
        title: String @where(operator: "like")

        "Filters by content. Accepts SQL LIKE wildcards `%` and `_`."
        content: String @where(operator: "like")

        "Filters by category. Accepts SQL LIKE wildcards `%` and `_`."
        category: String @where(operator: "like")

        hasCategories: _ @whereHasConditions(columns: ["name", "id"])
    ): [Post] @paginate(defaultCount: 10)

    "Find a single post by an identifying attribute."
    post(
        "Search by primary key."
        id: ID @eq @rules(apply: ["prohibits:slug", "required_without:slug"])

        "Search by slug."
        slug: String @eq @rules(apply: ["prohibits:id", "required_without:id"])
    ): Post @find
}

"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!
}
